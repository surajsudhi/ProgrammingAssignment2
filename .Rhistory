r
install.packages("slidify")
install.packages("ggplot2")
clear()
install.packages("devtools")
library(devtools)
getwd
getwd()
getwd()
x <- 1
x
x <- 2:20
x
x = 1
x
attributes(x)
?attributes
m <- matrix(nrow = 2,ncol = 3)
m
dim(m)
attributes(m)
m <- matrix(1:6,nrow=2,ncol=3)
m
x <- 1:3
y <- 10:12
cbind(x,y)
rbind(x,y)
x <- 1:10
dim(x)
dim(x)<- c(2,5)
x
y <-vector()
y
y <- vector(1:10)
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam[,1:5])
vector()
?vector
vector(mode="numeric",10)
vector(mode="character",10)
x <- vector(mode="numeric",10)
attributes(x)
?attributes
x <- null
x <- c("a","b")
x <- c(2,TRUE)
x <- c("2",TRUE)
x <- c(2+i,"test")
y <- 2+i
x <- 1:6
x<- 0:6
class(x)
as.numeric(x)
as.logical(x)
as.character(x)
x <- list(1,"x",TRUE)
x
m <- matrix(nrow=2, ncol=3 )
m
attributes(m)
m <-matrix(1:6, nrow=2, ncol=3)
m
x <- 1:3
y <- 10:11
cbin(x,y)
cbind(x,y)
y <-10:12
cbind(x,y)
x <- factor(c("a","b","c","a","b","c"))
x
unclass(x)
x <- factor(c("a","b","c","a","b","c"),level("c","b","a"))
x <- factor(c("a","b","c","a","b","c"), levels=c("c","b","a"))
x
library(lattice)
library(datasets)
xyplot(Ozone~Wind, data=airquality)
library(ggplot2)
str(mpg)
qplot(displ,hwy, data=mpg)
qplot(displ,hwy, data=mpg, color=drv)
qplot(displ,hwy, data=mpg, color=drv, geom=c("point","smooth"))
qplot(displ,hwy, data=mpg,geom=c("point","smooth"))
qplot(hwy,data=mpg, fill=drv)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplot(hwy, data=mpg, facets=drv~.)
str(mpg)
xyplot(displ~hwy|drv, cty)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
str(Diet)
str(Bodyweight)
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
str(f)
str(Rat)
str(rat)
?nlme
?xyplot
str(BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
?llines
?points()
?axis()
?splom
data(airquality)
library(datasets)
data(airquality)
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
str(movies)
qplot(votes, rating, data=movies)
qplot(votes, rating, data=movies, smooth="loess")
qplot(votes, rating, data=movies) + geom_smooth()
qplot(votes, rating, data=movies) + stats_smooth("loess")
x <- list(a=1:5, b=rnorm(10))
lapply(x,mean)
x <- list(a=1:5, b=rnorm(10))
x
lapply(x,sum)
x <-1:4
x
?runif
runif(1:4)
lapply(x,runif)
x <- list(a=matrix(1:4,2,2),b=matrix(1:6,3,2))
x
lapply(x,function(t) t[,1])
?length
length(x)
x <- c(1,2,3,5)
length(x)
a <- array(rnorm(2*2*10),c(2,2,10))
a
x <- list(rep(1,4),rep(2,3),rep(3,2),rep(4,1))
x
rep(1:4,4:1)
x <- c(rnorm(10),runif(10),rnorm(10,1))
x
f <- gl(3,10)
f
tapply(x,f,mean)
tapply(x,c(1,2,3),mean)
library(datasets)
data(iris)
?iris
iris
lapply(iris,mean)
f <- c(rep("setosa",500),rep("versicolor",50),rep("virginica",50))
f
tapply(iris,f,mean)
f
length(f)
rep("a",10)
rep("setosa",50)
length(rep("setosa",50))
f <- c(rep("setosa",50),rep("versicolor",50),rep("virginica",50))
tapply(iris,f,mean)
length(f)
length(iris)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
length(x)
iris
tapply(iris[,"Sepal.Length"],f,mean)
library(datasets)
data(mtcars)
?mtcars
library(datasets)
data(iris)
iris
split(iris$Sepal.Length,iris$Species)
lapply(split(iris$Sepal.Length,iris$Species),mean)
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
iris
iris[,1:4]
rowMeans(iris)
rowMeans(iris[,1:4])
colMeans(iris[,1:4])
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
82.63636 - 209.21429
debug(ls)
ls
ls
apply(iris[, 1:4], 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
?<<-
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makevector(c(1,2,3,4,5,6,7,8,9,10))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makevector(c(1,2,3,4,5,6,7,8,9,10))
cachevector(222)
makeVector(c(1,2,3,4,5,6,7,8,9,10))
cachemean(x)
y <- makeVector(c(11,12,12,434,12,33,43535))
y
cachemean(y)
x <- matrix(1:4,2,2)
x
solve(x)
x <- matrix(1:100,10,10)
x
solve(x)
solve(x)
x <- matrix(1:16,4,4)
solve(x)
?solve
myfunc <- function(m<- matrix()) {}
myfunc <- function(m = matrix()) {m}
myfunc(matrix(1:4,2,2))
setwd("C:/Users/i047201/Desktop/coursera/Rprog/ProgrammingAssignment2")
getwd()
load("cachematrix.R")
load(cachematrix.R)
load("cachematrix.R")
load("cachematrix.R")
load("cachematrix.R")
load("newcachematrix.R")
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<-inverse
getinverse <- function() m
list(set=set,get=get, setinverse=setinverse,getinverse=getinverse)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<-inverse
getinverse <- function() m
list(set=set,get=get, setinverse=setinverse,getinverse=getinverse)
}
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<-inverse
getinverse <- function() m
list(set=set,get=get, setinverse=setinverse,getinverse=getinverse)
}
t <- makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(t)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <-x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(t)
